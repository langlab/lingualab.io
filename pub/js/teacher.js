// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  module('App.File', function(exports, top) {
    var Collection, Model, Views, _ref;
    Model = (function(_super) {

      __extends(Model, _super);

      function Model() {
        return Model.__super__.constructor.apply(this, arguments);
      }

      Model.prototype.idAttribute = '_id';

      return Model;

    })(Backbone.Model);
    Collection = (function(_super) {

      __extends(Collection, _super);

      function Collection() {
        return Collection.__super__.constructor.apply(this, arguments);
      }

      Collection.prototype.model = Model;

      Collection.prototype.url = '/t/files';

      Collection.prototype.initialize = function() {
        return this.fetch();
      };

      Collection.prototype.fromDB = function(data) {
        var method, model, options;
        method = data.method, model = data.model, options = data.options;
        console.log('updating ', model);
        switch (method) {
          case 'create':
            return this.add(model);
          case 'status':
            return this.get(model._id).set(model);
        }
      };

      Collection.prototype.uploadFile = function(file) {
        var onProgress, onSuccess;
        onProgress = function(e) {
          var per;
          per = Math.round((e.position / e.total) * 100);
          return console.log('progress: ' + per);
        };
        onSuccess = function() {
          return console.log('upload complete');
        };
        return $.upload("/upload", file, {
          upload: {
            progress: onProgress
          },
          success: onSuccess
        });
      };

      return Collection;

    })(Backbone.Collection);
    exports.Views = Views = {};
    Views.DragOver = (function(_super) {

      __extends(DragOver, _super);

      function DragOver() {
        return DragOver.__super__.constructor.apply(this, arguments);
      }

      DragOver.prototype.dragOver = function(e) {
        this.$('.upload-place-holder').show();
        e.originalEvent.dataTransfer.dropEffect = "copy";
        e.stopPropagation();
        e.preventDefault();
        return false;
      };

      DragOver.prototype.dragEnter = function(e) {
        console.log('dragenter', $(e.target));
        if ($(e.target).hasClass('fileList')) {
          this.$('.upload-place-holder').show();
          e.stopPropagation();
          e.preventDefault();
        }
        return false;
      };

      DragOver.prototype.dragLeave = function(e) {
        console.log('dragleave', $(e.target));
        if ($(e.target).hasClass('fileList')) {
          this.$('.upload-place-holder').hide();
          e.stopPropagation();
          e.preventDefault();
        }
        return false;
      };

      DragOver.prototype.drop = function(e) {
        var f, files, i, _i, _len;
        e.stopPropagation();
        e.preventDefault();
        this.$('.upload-place-holder').hide();
        files = e.originalEvent.dataTransfer.files;
        i = 0;
        for (_i = 0, _len = files.length; _i < _len; _i++) {
          f = files[_i];
          console.log('uploading ', f);
          this.collection.uploadFile(f);
        }
        return false;
      };

      return DragOver;

    })(Backbone.View);
    Views.Browser = (function(_super) {

      __extends(Browser, _super);

      function Browser() {
        return Browser.__super__.constructor.apply(this, arguments);
      }

      Browser.prototype.tagName = 'div';

      Browser.prototype.className = 'row file-browser';

      Browser.prototype.template = function() {
        return ul({
          "class": 'thumbnails'
        }, function() {
          var f, _i, _len, _ref, _results;
          _ref = this.files.models;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            f = _ref[_i];
            _results.push(li({
              "class": 'span3'
            }, function() {
              return a({
                "class": 'thumbnail'
              }, function() {
                img({
                  src: 'http://placehold.it/600x400'
                });
                h5("" + (f.get('title')));
                return p("" + (f.get('localPath')));
              });
            }));
          }
          return _results;
        });
      };

      Browser.prototype.render = function() {
        this.$el.html(ck.render(this.template, {
          files: this.collection
        }));
        return this;
      };

      return Browser;

    })(Views.DragOver);
    Views.ListItem = (function(_super) {

      __extends(ListItem, _super);

      function ListItem() {
        return ListItem.__super__.constructor.apply(this, arguments);
      }

      ListItem.prototype.tagName = 'tr';

      ListItem.prototype.className = 'file-list-item';

      ListItem.prototype.template = function() {
        console.log(this);
        td(this.get('title'));
        td(this.get('status'));
        td(moment(this.get('created')).format("MMM D h:mm:ss a"));
        return td(this.get('localPath'));
      };

      return ListItem;

    })(Backbone.View);
    Views.List = (function(_super) {

      __extends(List, _super);

      function List() {
        this.addItem = __bind(this.addItem, this);
        return List.__super__.constructor.apply(this, arguments);
      }

      List.prototype.tagName = 'div';

      List.prototype.className = 'container file-list';

      List.prototype.initialize = function() {
        var _this = this;
        this.collection.on('add', this.addItem);
        this.collection.on('change', function(f) {
          return f.listItemView.render();
        });
        return this.collection.on('reset', function() {
          return _this.render();
        });
      };

      List.prototype.events = {
        'click': function(e) {
          return console.log('click');
        },
        'dragenter table': 'dragEnter',
        'dragleave table': 'dragLeave',
        'drop table': 'drop'
      };

      List.prototype.template = function() {
        return table({
          "class": 'table'
        }, function() {
          thead(function() {
            tr(function() {
              th('Title');
              th('');
              th('uploaded');
              return th('description here...');
            });
            return tr({
              "class": 'upload-place-holder'
            }, function() {
              return td({
                colspan: '4'
              }, 'drop to upload your file');
            });
          });
          tbody(function() {});
          return tfoot(function() {
            return tr(function() {
              return td({
                colspan: '4'
              }, function() {
                return form({
                  action: '/upload',
                  method: 'post',
                  enctype: "multipart/form-data"
                }, function() {
                  input({
                    type: 'text',
                    name: 'title'
                  });
                  input({
                    type: 'file',
                    name: 'upload'
                  });
                  return input({
                    type: 'submit',
                    value: 'upload'
                  });
                });
              });
            });
          });
        });
      };

      List.prototype.addItem = function(f) {
        var _ref;
        if ((_ref = f.listItemView) == null) {
          f.listItemView = new Views.ListItem({
            model: f
          });
        }
        f.listItemView.render().open(this.$('tbody'));
        return this;
      };

      List.prototype.render = function() {
        var f, _i, _len, _ref;
        console.log(this.collection);
        this.$el.html(ck.render(this.template, this.collection));
        _ref = this.collection.models;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          f = _ref[_i];
          this.addItem(f);
        }
        this.delegateEvents();
        return this;
      };

      return List;

    })(Views.DragOver);
    return _ref = [Model, Collection], exports.Model = _ref[0], exports.Collection = _ref[1], _ref;
  });

  module('App.Teacher', function(exports, top) {
    var Model, Views;
    Model = (function(_super) {

      __extends(Model, _super);

      function Model() {
        return Model.__super__.constructor.apply(this, arguments);
      }

      Model.prototype.initialize = function() {
        return this.files = new App.File.Collection(this.get('files'));
      };

      return Model;

    })(Backbone.Model);
    exports.Views = Views = {};
    Views.TopBar = (function(_super) {

      __extends(TopBar, _super);

      function TopBar() {
        return TopBar.__super__.constructor.apply(this, arguments);
      }

      TopBar.prototype.tagName = 'div';

      TopBar.prototype.className = 'navbar navbar-fixed-top';

      TopBar.prototype.template = function() {
        return div({
          "class": 'navbar-inner'
        }, function() {
          return div({
            "class": 'container'
          }, function() {
            a({
              "class": 'brand',
              href: '#'
            }, function() {
              i({
                "class": 'icon-beaker icon-large'
              });
              return span(' lingualab.io');
            });
            ul({
              "class": 'nav'
            }, function() {
              return li(function() {
                return a({
                  href: '#files'
                }, function() {
                  i({
                    "class": 'icon-briefcase'
                  });
                  return text(' Files');
                });
              });
            });
            return span({
              "class": 'pull-right'
            }, "" + (this.get('name')));
          });
        });
      };

      TopBar.prototype.render = function() {
        this.$el.html(ck.render(this.template, this.model));
        return this;
      };

      return TopBar;

    })(Backbone.View);
    return exports.Router = (function(_super) {

      __extends(Router, _super);

      function Router() {
        return Router.__super__.constructor.apply(this, arguments);
      }

      Router.prototype.initialize = function() {
        this.extendRoutesWith(this.teacherRoutes);
        this.teacher = new Model(top.app.session.user);
        this.fromDB();
        return this.showTopBar();
      };

      Router.prototype.teacherRoutes = {
        'files': 'files'
      };

      Router.prototype.fromDB = function() {
        var _this = this;
        this.io = top.app.sock;
        return this.io.on('file:sync', function(data) {
          console.log('file:sync', data);
          console.log(_this.teacher.files);
          return _this.teacher.files.fromDB(data);
        });
      };

      Router.prototype.showTopBar = function() {
        var _base, _ref;
        if ((_ref = (_base = this.views).topBar) == null) {
          _base.topBar = new Views.TopBar({
            model: this.teacher
          });
        }
        return this.views.topBar.render().open();
      };

      Router.prototype.home = function() {
        this.clearViews();
        return this.showTopBar();
      };

      Router.prototype.files = function() {
        this.showTopBar();
        this.views.filez = new App.File.Views.List({
          collection: this.teacher.files
        });
        return this.views.filez.render().open('.main');
      };

      Router.prototype.extra = function() {
        return console.log('get jiggy withit');
      };

      return Router;

    })(top.App.Router);
  });

}).call(this);
