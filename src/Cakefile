###
* Cakefile for build tasks
###

fs = require 'fs'
path = require 'path'
hound = require 'hound'
sty = require 'sty'

_  = require 'underscore'

{EventEmitter} = require 'events'

{ spawn } = require 'child_process'

less = require 'less'
stylus = require 'stylus'

CFG = require './server/config'

{ parser: jsp, uglify: pro } = require 'uglify-js'

doOnlyEvery = (every,fn)-> _.throttle fn, every

uglify = (code)->

  ast = jsp.parse(code)           # parse code and get the initial AST
  ast = pro.ast_mangle(ast)       # get a new AST with mangled names
  ast = pro.ast_squeeze(ast)      # get an AST with compression optimizations
  
  pro.gen_code(ast)               # compressed code here



concat = (pathList)->

  code = ''
  for pth in pathList
    code += (fs.readFileSync pth) + ';'

  code


beep = -> spawn "printf '\a'"

class watchedProcess extends EventEmitter
  
  constructor: (@options)->

  start: ->
    @cp = spawn @options.cmd, @options.opts

    @cp.stdout.on 'data', (data)=> @msgLog(data)
    @cp.stderr.on 'data', (data)=> @errLog(data)
    @

  restart: ->
    @cp.kill()
    @cp.on 'exit', =>
      @start()
      if msg = @options.startMsg then @msgLog msg
    @

  watch: ->
    @watcher = new hound.watch @options.dir
    @watcher.on 'create', (file,stats)=>
      @msgLog "#{file} created."
      @restart()

    @watcher.on 'change', (file,stats)=>
      @msgLog "#{file} changed."
      @restart()

    @watcher.on 'delete', (file)=>
      @msgLog "#{file} deleted."
      @restart()
    @

  msgLog: (data)->
    if /error/.test(data) then @errLog(data)
    else console.log sty.green data
    @

  errLog: (data)->
    @beep()
    console.log sty.red data
    @

  beep: -> 
    spawn "printf '\a'"
    @


watchModule = (m)->
  p = new watchedProcess {
    cmd: 'coffee'
    opts: ['-j',"#{__dirname}/../pub/js/#{m}.js",'-cw',"#{__dirname}/client/coffee/#{m}/"]
    dir: "#{__dirname}/client/coffee/#{m}/"
  }

  p.start()

  
watchClientCoffee = ->
  clientModules = ['common','teacher']

  wps = {}

  for m in clientModules
    wps[m] = watchModule(m)



watchClientStylus = ->
  styler = new watchedProcess {
    cmd: 'stylus'
    opts: ['-w',"#{__dirname}/client/styl/index.styl","-o","#{__dirname}/../pub/css/"]
    dir: "#{__dirname}/client/styl/"
  }
  styler.start()

watchVendorJS = ->
  vWatcher = new watchedProcess {
    cmd: "cat #{__dirname}/client/js/* | uglifyjs > #{__dirname}/../pub/js/vendor.js"
    dir: "#{__dirname}/client/js/"
  }
  vWatcher.start().watch()


watchServer = ->
  server = new watchedProcess {
    cmd: 'coffee'
    opts: ['lingualab.coffee']
    dir: "#{__dirname}/server/"
  }
  server.start().watch()
  

task 'dev', 'start coding, compile coffescript and stylus', (options)->
  watchClientCoffee()
  watchClientStylus()
  watchServer()


  






